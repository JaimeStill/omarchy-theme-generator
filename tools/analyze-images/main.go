package main

import (
	"context"
	"flag"
	"fmt"
	"os"
	"path/filepath"
	"sort"
	"strings"

	"github.com/JaimeStill/omarchy-theme-generator/pkg/formats"
	"github.com/JaimeStill/omarchy-theme-generator/pkg/loader"
	"github.com/JaimeStill/omarchy-theme-generator/pkg/processor"
	"github.com/JaimeStill/omarchy-theme-generator/pkg/settings"
)

func main() {
	// Parse command line flags
	imagesDir := flag.String("images", "tests/images", "Directory containing test images")
	flag.Parse()

	// Find all image files
	entries, err := os.ReadDir(*imagesDir)
	if err != nil {
		fmt.Printf("Error reading directory: %v\n", err)
		return
	}

	var images []string
	for _, entry := range entries {
		if entry.IsDir() {
			continue
		}
		name := entry.Name()
		ext := strings.ToLower(filepath.Ext(name))
		if ext == ".jpg" || ext == ".jpeg" || ext == ".png" {
			images = append(images, name)
		}
	}

	sort.Strings(images)

	// Initialize processor
	s := settings.DefaultSettings()
	p := processor.New(s)
	l := loader.NewFileLoader(s)
	ctx := context.Background()

	// Start building README content
	var readme strings.Builder
	readme.WriteString("# Test Images Analysis\n\n")
	readme.WriteString("This document provides detailed color analysis of all test images used for validating the theme generation system. ")
	readme.WriteString("Each image is processed through the complete color extraction and theme generation pipeline.\n\n")
	readme.WriteString("Generated by `go run tools/analyze-images/main.go`\n\n")

	for _, imageName := range images {
		imagePath := filepath.Join(*imagesDir, imageName)

		// Load image
		img, err := l.LoadImage(ctx, imagePath)
		if err != nil {
			readme.WriteString(fmt.Sprintf("## %s\n\n", imageName))
			readme.WriteString(fmt.Sprintf("**Error loading image**: %v\n\n", err))
			continue
		}

		// Get image info
		info, err := l.GetImageInfo(ctx, imagePath)
		if err != nil {
			readme.WriteString(fmt.Sprintf("## %s\n\n", imageName))
			readme.WriteString(fmt.Sprintf("**Error getting image info**: %v\n\n", err))
			continue
		}

		// Process image for complete analysis
		profile, err := p.ProcessImage(img)
		if err != nil {
			readme.WriteString(fmt.Sprintf("## %s\n\n", imageName))
			readme.WriteString(fmt.Sprintf("**Error processing image**: %v\n\n", err))
			continue
		}

		// Write image section header
		readme.WriteString(fmt.Sprintf("## %s\n\n", imageName))
		readme.WriteString(fmt.Sprintf("![%s](./%s)\n\n", imageName, imageName))
		readme.WriteString(fmt.Sprintf("**Dimensions**: %d x %d px\n\n", info.Width, info.Height))

		// Image Colors table
		readme.WriteString("### Image Colors\n\n")
		readme.WriteString("| Function | Value | Color |\n")
		readme.WriteString("|----------|-------|-------|\n")

		// All color data is available from the processor
		bgHex := formats.ToHex(profile.Colors.Background)
		fgHex := formats.ToHex(profile.Colors.Foreground)
		primaryHex := formats.ToHex(profile.Colors.Primary)
		secondaryHex := formats.ToHex(profile.Colors.Secondary)
		accentHex := formats.ToHex(profile.Colors.Accent)
		mostFrequentHex := formats.ToHex(profile.Colors.MostFrequent)

		readme.WriteString(fmt.Sprintf("| Background | `%s` | %s |\n", bgHex, renderColorSquare(bgHex)))
		readme.WriteString(fmt.Sprintf("| Foreground | `%s` | %s |\n", fgHex, renderColorSquare(fgHex)))
		readme.WriteString(fmt.Sprintf("| Primary | `%s` | %s |\n", primaryHex, renderColorSquare(primaryHex)))
		readme.WriteString(fmt.Sprintf("| Secondary | `%s` | %s |\n", secondaryHex, renderColorSquare(secondaryHex)))
		readme.WriteString(fmt.Sprintf("| Accent | `%s` | %s |\n", accentHex, renderColorSquare(accentHex)))
		readme.WriteString(fmt.Sprintf("| Most Frequent | `%s` | %s |\n", mostFrequentHex, renderColorSquare(mostFrequentHex)))

		readme.WriteString("\n")

		// Color Profile table - all data comes directly from the processor
		readme.WriteString("### Color Profile\n\n")
		readme.WriteString("| Property | Value |\n")
		readme.WriteString("|----------|-------|\n")

		readme.WriteString(fmt.Sprintf("| Mode | %s |\n", profile.Mode))
		readme.WriteString(fmt.Sprintf("| Color Scheme | %s |\n", profile.ColorScheme))
		readme.WriteString(fmt.Sprintf("| Dominant Hue | %.1f° |\n", profile.DominantHue))
		readme.WriteString(fmt.Sprintf("| Hue Variance | %.1f° |\n", profile.HueVariance))
		readme.WriteString(fmt.Sprintf("| Average Luminance | %.3f |\n", profile.AvgLuminance))
		readme.WriteString(fmt.Sprintf("| Average Saturation | %.3f |\n", profile.AvgSaturation))
		readme.WriteString(fmt.Sprintf("| Grayscale? | %t |\n", profile.IsGrayscale))
		readme.WriteString(fmt.Sprintf("| Monochromatic? | %t |\n", profile.IsMonochromatic))

		readme.WriteString("\n")
	}

	// Write README to tests/images/README.md
	outputPath := filepath.Join(*imagesDir, "README.md")
	err = os.WriteFile(outputPath, []byte(readme.String()), 0644)
	if err != nil {
		fmt.Printf("Error writing README: %v\n", err)
		return
	}

	fmt.Printf("Successfully analyzed %d images and wrote README to %s\n", len(images), outputPath)
}

func renderColorSquare(hexColor string) string {
	return fmt.Sprintf(`<span style="display:inline-block;width:20px;height:20px;background-color:%s;border:1px solid #ccc;vertical-align:middle;"></span>`, hexColor)
}