package template

import (
	"context"
	"fmt"
	"io"
	"strings"
	"sync"
	"text/template"
	"time"

	"github.com/JaimeStill/omarchy-theme-generator/pkg/theme"
)

// alacrittyTemplate contains the complete TOML structure for Alacritty configuration.
// Based on the official Alacritty configuration specification at https://alacritty.org/config-alacritty.html
const alacrittyTemplate = `# Alacritty Terminal Theme: {{.ThemeName}}
# Generated by Omarchy Theme Generator on {{.Generated}}
# Strategy: {{.Strategy}} | Mode: {{if .IsLight}}Light{{else}}Dark{{end}}
# Source: {{.Theme.SourcePath}}

[colors]
# Primary colors
[colors.primary]
background = {{.Background.Quoted}}
foreground = {{.Foreground.Quoted}}
{{if ne .Background.A 255}}dim_foreground = {{.Background.Quoted}}{{end}}
{{if .IsLight}}bright_foreground = {{.Foreground.Quoted}}{{else}}bright_foreground = "None"{{end}}

# Cursor colors
[colors.cursor]
text = "CellBackground"
cursor = {{.Primary.Quoted}}

# Vi mode cursor colors
[colors.vi_mode_cursor]
text = "CellBackground"
cursor = {{.Primary.Quoted}}

# Search colors
[colors.search]
[colors.search.matches]
foreground = {{if .IsLight}}{{.Background.Quoted}}{{else}}{{.Foreground.Quoted}}{{end}}
background = {{.Primary.Quoted}}

[colors.search.focused_match]
foreground = {{if .IsLight}}{{.Background.Quoted}}{{else}}{{.Foreground.Quoted}}{{end}}
background = {{.Terminal.Yellow.Quoted}}

# Hints colors (for URL highlighting)
[colors.hints]
[colors.hints.start]
foreground = {{if .IsLight}}{{.Background.Quoted}}{{else}}{{.Foreground.Quoted}}{{end}}
background = {{.Terminal.Yellow.Quoted}}

[colors.hints.end]
foreground = {{if .IsLight}}{{.Background.Quoted}}{{else}}{{.Foreground.Quoted}}{{end}}
background = {{.Primary.Quoted}}

# Line indicator (for vi mode and search)
[colors.line_indicator]
foreground = "None"
background = "None"

# Footer bar (for search mode)
[colors.footer_bar]
foreground = {{if .IsLight}}{{.Background.Quoted}}{{else}}{{.Foreground.Quoted}}{{end}}
background = {{if .IsLight}}{{.Foreground.Quoted}}{{else}}{{.Background.Quoted}}{{end}}

# Selection colors
[colors.selection]
text = "CellBackground"
background = {{.Primary.Quoted}}

# Normal ANSI colors (0-7)
[colors.normal]
black   = {{(index .Terminal.Normal 0).Quoted}}
red     = {{(index .Terminal.Normal 1).Quoted}}
green   = {{(index .Terminal.Normal 2).Quoted}}
yellow  = {{(index .Terminal.Normal 3).Quoted}}
blue    = {{(index .Terminal.Normal 4).Quoted}}
magenta = {{(index .Terminal.Normal 5).Quoted}}
cyan    = {{(index .Terminal.Normal 6).Quoted}}
white   = {{(index .Terminal.Normal 7).Quoted}}

# Bright ANSI colors (8-15)  
[colors.bright]
black   = {{(index .Terminal.Bright 0).Quoted}}
red     = {{(index .Terminal.Bright 1).Quoted}}
green   = {{(index .Terminal.Bright 2).Quoted}}
yellow  = {{(index .Terminal.Bright 3).Quoted}}
blue    = {{(index .Terminal.Bright 4).Quoted}}
magenta = {{(index .Terminal.Bright 5).Quoted}}
cyan    = {{(index .Terminal.Bright 6).Quoted}}
white   = {{(index .Terminal.Bright 7).Quoted}}

# Transparent background colors (if theme supports transparency)
{{if ne .Background.A 255}}
[colors.transparent_background_colors]
enabled = true
{{end}}

# Theme metadata (comments for reference)
# Primary color: {{.Primary.Hex}} (H:{{printf "%.0f" (.Primary.H | mul 360)}}Â° S:{{printf "%.0f" (.Primary.S | mul 100)}}% L:{{printf "%.0f" (.Primary.L | mul 100)}}%)
# Background: {{.Background.Hex}} (Luminance: {{printf "%.3f" .Background.L}})
# Foreground: {{.Foreground.Hex}} (Luminance: {{printf "%.3f" .Foreground.L}})
# Synthesis mode: {{.Theme.Metadata.GenerationMode}}
# Colors extracted: {{.Theme.Metadata.ExtractedColors}}
# Colors synthesized: {{.Theme.Metadata.SynthesizedColors}}
# Total generation time: {{.Theme.Metadata.Performance.TotalTime}}
{{if .Theme.Metadata.Validation}}# WCAG validation: {{.Theme.Metadata.Validation.PassingColors}}/{{add .Theme.Metadata.Validation.PassingColors .Theme.Metadata.Validation.FailingColors}} colors pass{{end}}
`

// AlacrittyGenerator implements ConfigGenerator for Alacritty terminal emulator TOML configuration.
type AlacrittyGenerator struct {
	template *template.Template
	once     sync.Once
	
	// Configuration options
	IncludeMetadata     bool // Whether to include generation metadata as comments
	IncludeTransparency bool // Whether to include transparency settings
	ValidateColors      bool // Whether to validate color contrast before generation
}

// NewAlacrittyGenerator creates a new Alacritty configuration generator.
func NewAlacrittyGenerator() *AlacrittyGenerator {
	return &AlacrittyGenerator{
		IncludeMetadata:     true,
		IncludeTransparency: true,
		ValidateColors:      true,
	}
}

// Name returns the human-readable name of this generator.
func (ag *AlacrittyGenerator) Name() string {
	return "alacritty"
}

// Extension returns the file extension for Alacritty configuration files.
func (ag *AlacrittyGenerator) Extension() string {
	return ".toml"
}

// Validate ensures the theme contains all necessary information for Alacritty generation.
func (ag *AlacrittyGenerator) Validate(t *theme.Theme) error {
	if t == nil {
		return fmt.Errorf("theme is nil")
	}
	
	if t.Primary == nil {
		return fmt.Errorf("theme missing primary color")
	}
	
	if t.Background == nil {
		return fmt.Errorf("theme missing background color")
	}
	
	if t.Foreground == nil {
		return fmt.Errorf("theme missing foreground color")
	}
	
	if len(t.Palette) < 8 {
		return fmt.Errorf("theme palette has insufficient colors (%d, need at least 8)", len(t.Palette))
	}
	
	// Validate color contrast if enabled
	if ag.ValidateColors {
		if err := ag.validateColorContrast(t); err != nil {
			return fmt.Errorf("color contrast validation failed: %w", err)
		}
	}
	
	return nil
}

// validateColorContrast checks that the theme colors meet minimum contrast requirements.
func (ag *AlacrittyGenerator) validateColorContrast(t *theme.Theme) error {
	// Check that foreground has sufficient contrast against background
	contrastRatio := t.Foreground.ContrastRatio(t.Background)
	if contrastRatio < 4.5 {
		return fmt.Errorf("foreground/background contrast ratio %.2f is below WCAG AA standard (4.5)", contrastRatio)
	}
	
	// Check that primary color has sufficient contrast against background
	primaryContrast := t.Primary.ContrastRatio(t.Background)
	if primaryContrast < 3.0 { // Slightly lower requirement for accent colors
		return fmt.Errorf("primary/background contrast ratio %.2f is below recommended minimum (3.0)", primaryContrast)
	}
	
	return nil
}

// getTemplate returns the compiled template, initializing it on first use.
func (ag *AlacrittyGenerator) getTemplate() *template.Template {
	ag.once.Do(func() {
		// Create template with helper functions
		tmpl := template.New("alacritty").Funcs(template.FuncMap{
			"add": func(a, b int) int { return a + b },
			"mul": func(a, b float64) float64 { return a * b },
		})
		
		ag.template = template.Must(tmpl.Parse(alacrittyTemplate))
	})
	return ag.template
}

// Generate creates an Alacritty TOML configuration from the given theme.
func (ag *AlacrittyGenerator) Generate(ctx context.Context, t *theme.Theme) ([]byte, error) {
	// Validate theme
	if err := ag.Validate(t); err != nil {
		return nil, fmt.Errorf("theme validation failed: %w", err)
	}
	
	// Prepare template data
	formatter := NewColorFormatter(FormatHex)
	templateData, err := formatter.PrepareTemplateData(t)
	if err != nil {
		return nil, fmt.Errorf("template data preparation failed: %w", err)
	}
	
	// Execute template
	var buf strings.Builder
	tmpl := ag.getTemplate()
	
	if err := tmpl.Execute(&buf, templateData); err != nil {
		return nil, fmt.Errorf("template execution failed: %w", err)
	}
	
	return []byte(buf.String()), nil
}

// WriteTo writes the Alacritty configuration directly to the provided writer.
func (ag *AlacrittyGenerator) WriteTo(ctx context.Context, w io.Writer, t *theme.Theme) (int64, error) {
	// Generate content
	content, err := ag.Generate(ctx, t)
	if err != nil {
		return 0, err
	}
	
	// Write to provided writer
	n, err := w.Write(content)
	return int64(n), err
}

// GenerateWithOptions creates an Alacritty configuration with specific generator options.
func (ag *AlacrittyGenerator) GenerateWithOptions(ctx context.Context, t *theme.Theme, opts AlacrittyOptions) ([]byte, error) {
	// Temporarily apply options
	originalMetadata := ag.IncludeMetadata
	originalTransparency := ag.IncludeTransparency
	originalValidate := ag.ValidateColors
	
	ag.IncludeMetadata = opts.IncludeMetadata
	ag.IncludeTransparency = opts.IncludeTransparency
	ag.ValidateColors = opts.ValidateColors
	
	// Restore original settings after generation
	defer func() {
		ag.IncludeMetadata = originalMetadata
		ag.IncludeTransparency = originalTransparency
		ag.ValidateColors = originalValidate
	}()
	
	return ag.Generate(ctx, t)
}

// AlacrittyOptions contains configuration options for Alacritty generation.
type AlacrittyOptions struct {
	IncludeMetadata     bool // Include generation metadata as comments
	IncludeTransparency bool // Include transparency configuration
	ValidateColors      bool // Perform color validation before generation
	MinContrastRatio    float64 // Minimum contrast ratio requirement
}

// DefaultAlacrittyOptions returns the recommended options for Alacritty generation.
func DefaultAlacrittyOptions() AlacrittyOptions {
	return AlacrittyOptions{
		IncludeMetadata:     true,
		IncludeTransparency: true,
		ValidateColors:      true,
		MinContrastRatio:    4.5,
	}
}

// GenerationMetrics contains performance and quality metrics for Alacritty generation.
type GenerationMetrics struct {
	GenerationTime   time.Duration // Time taken to generate configuration
	TemplateSize     int           // Size of generated configuration in bytes
	ColorsValidated  int           // Number of colors that passed validation
	ContrastRatio    float64       // Primary contrast ratio achieved
	ThemeComplexity  string        // Complexity assessment (simple/moderate/complex)
}

// GenerateWithMetrics creates an Alacritty configuration and returns detailed metrics.
func (ag *AlacrittyGenerator) GenerateWithMetrics(ctx context.Context, t *theme.Theme) ([]byte, GenerationMetrics, error) {
	startTime := time.Now()
	
	// Generate configuration
	content, err := ag.Generate(ctx, t)
	if err != nil {
		return nil, GenerationMetrics{}, err
	}
	
	generationTime := time.Since(startTime)
	
	// Calculate metrics
	metrics := GenerationMetrics{
		GenerationTime:  generationTime,
		TemplateSize:    len(content),
		ColorsValidated: len(t.Palette),
		ContrastRatio:   t.Foreground.ContrastRatio(t.Background),
		ThemeComplexity: ag.assessThemeComplexity(t),
	}
	
	return content, metrics, nil
}

// assessThemeComplexity determines the complexity level of the theme based on
// synthesis strategy and color variety.
func (ag *AlacrittyGenerator) assessThemeComplexity(t *theme.Theme) string {
	switch t.Metadata.Strategy {
	case "monochromatic":
		return "simple"
	case "analogous":
		return "simple"
	case "complementary":
		return "moderate"
	case "triadic":
		return "moderate"
	case "tetradic", "split-complementary":
		return "complex"
	default:
		if len(t.Palette) >= 16 {
			return "complex"
		} else if len(t.Palette) >= 12 {
			return "moderate"
		}
		return "simple"
	}
}